{% import "macro.tera" as macro -%}

{% macro gen_bitfield(bitfield) -%}
    {% set type = macro::gen_type(size=bitfield.bit_size) -%}
    {% set name = macro::bitfield_name(raw=bitfield.name) -%}

    #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
    #[repr(transparent)]
    {{ macro::gen_doc(item=bitfield) }}
    pub struct {{ name }} {
        bits: {{ type }}
    }

    impl Default for {{ name }} {
        fn default() -> Self {
            unsafe {
                Self::from_bits_unchecked({{ bitfield.default | hex }})
            }
        }
    }

    impl {{ name }} {
        #[inline(always)]
        pub const unsafe fn from_bits_unchecked(bits: {{ type }}) -> Self {
            Self { bits }
        }

        #[inline(always)]
        pub const fn to_bits(self) -> {{ type }} {
            self.bits
        }

        {% for field in bitfield.fields | sort(attribute="bit_offset") -%}
            {% set field_name = macro::field_name(raw=field.name) -%}
            {% if "enum_name" in field -%}
                {% set field_type =  macro::enum_name(raw=field.enum_name) -%}
            {% elif field.bit_size == 1 -%}
                {% set field_type = "bool" -%}
            {% else -%}
                {% set field_type = macro::gen_type(size=field.bit_size) -%}
            {% endif -%}
            {% set mask = field.bit_size | mask | hex -%}
    
            {% if "array" in field -%}
                {% set base = field.bit_offset | hex -%}
                {% set stride = field.array.stride | hex -%}
                {% set offset = "(" ~ base ~ "+ idx *" ~ stride ~ ")" -%}
            {% else -%}
                {% set offset = field.bit_offset | hex -%}
            {% endif -%}

            #[inline(always)]
            {{ macro::gen_doc(item=field) }}
            {% if "array" in field -%}
            pub const fn set_{{ field_name }}(mut self, idx: usize, val: {{ field_type }}) -> Self {
                assert!(idx < {{ field.array.len }});
            {% else -%}
            pub const fn set_{{ field_name }}(mut self, val: {{ field_type }}) -> Self {
            {% endif -%}
                self.bits &= !({{ mask }} << {{ offset }});
                {% if "enum_name" in field -%}
                self.bits |= (val.to_bits() as {{ type }} & {{ mask }}) << {{ offset }};
                {% elif field.bit_size == 1 -%}
                self.bits |= if val { 1 << {{ offset }} } else { 0 };
                {% else -%}
                self.bits |= (val as {{ type }} & {{ mask }}) << {{ offset }};
                {% endif -%}
                self
            }
            
            #[inline(always)]
            {{ macro::gen_doc(item=field) }}
            {% if "array" in field -%}
            pub const fn {{ field_name }}(self, idx: usize) -> {{ field_type }} {
                assert!(idx < {{ field.array.len }});
            {% else -%}
            pub const fn {{ field_name }}(self) -> {{ field_type }} {
            {% endif -%}
                {% if "enum_name" in field -%}
                let val = ((self.bits >> {{ offset }}) & {{ mask }}) as _;
                unsafe {
                    {{ field_type ~ "::from_bits_unchecked" }}(val)
                }
                {% elif field.bit_size == 1 -%}
                ((self.bits >> {{ offset }}) & {{ mask }}) != 0
                {% else -%}
                ((self.bits >> {{ offset }}) & {{ mask }}) as _
                {% endif -%}
            }
        {% endfor -%}
    }
{% endmacro gen_bitfield -%}